{"version":3,"file":"my-element.js","sourceRoot":"","sources":["src/my-element.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css, PropertyValues } from 'lit'\nimport { customElement, property, state } from 'lit/decorators.js'\nimport { repeat } from 'lit/directives/repeat.js'\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('date-picker')\nexport class MyElement extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n      border: solid 1px gray;\n      padding: 16px;\n      max-width: 800px;\n    }\n    .calendar {\n      display: grid;\n      font-family: helvetica, sans-serif;\n      grid-template-columns: repeat(7, 1fr);\n      gap: 1px;\n      list-style: none;\n      padding: 0;\n      margin: 0;\n      & > li {\n        aspect-ratio: 1;\n        border: solid 1px gray;\n        padding: 1rem;\n        display: grid;\n        place-items: center;\n      }\n    }\n  `\n\n  @state()\n  numberOfDays = 0\n\n  @property({ type: Object })\n  date = new Date()\n\n  @property({ type: Array })\n  items = [\n    { id: 1, name: 'one' },\n    { id: 2, name: 'two' },\n    { id: 3, name: 'three' },\n  ]\n\n  @property()\n  name = 'World'\n\n  /**\n   * The number of times the button has been clicked.\n   */\n  @property({ type: Number })\n  count = 0\n\n  override willUpdate(changedProperties: PropertyValues<this>) {\n    // only need to check changed properties for an expensive computation.\n    if (changedProperties.has('date')) {\n      // calculate month with days for the app.\n      console.log('changedProperties', changedProperties)\n      this.numberOfDays = new Date(\n        this.date.getFullYear(),\n        this.date.getMonth() + 1,\n        0\n      ).getDate()\n    }\n  }\n\n  override render() {\n    return html`\n      <h1>${this.sayHello(this.name)}!</h1>\n      <ol>\n        ${repeat(\n          this.items,\n          (item) => item.id,\n          (item, index) => {\n            return html`<li>${index}: ${item.name}</li>`\n          }\n        )}\n      </ol>\n      <button @click=${this._onClick} part=\"button\">\n        Click Count: ${this.count}\n      </button>\n      <p\n        >Days in\n        ${this.date.toLocaleString('default', {\n          month: 'long',\n        })}:\n        ${this.numberOfDays}</p\n      >\n      <p\n        >First of the month occurs on a:\n        ${new Date(\n          this.date.getFullYear(),\n          this.date.getMonth(),\n          1\n        ).toLocaleString('default', {\n          weekday: 'long',\n        })}\n        = ${new Date(this.date.getFullYear(), this.date.getMonth(), 1).getDay()}\n      </p>\n      <ol class=\"calendar\">\n        ${repeat(\n          Array.from(\n            {\n              length: new Date(\n                this.date.getFullYear(),\n                this.date.getMonth(),\n                1\n              ).getDay(),\n            },\n            (_, i) => i\n          ),\n          (day) => day,\n          () => {\n            return html`<li class=\"day\"></li>`\n          }\n        )}\n        ${repeat(\n          Array.from({ length: this.numberOfDays }, (_, i) => i + 1),\n          (day) => day,\n          (day) => {\n            return html`<li class=\"day\">${day}</li>`\n          }\n        )}\n        ${repeat(\n          Array.from(\n            {\n              length:\n                7 -\n                new Date(\n                  this.date.getFullYear(),\n                  this.date.getMonth(),\n                  this.numberOfDays\n                ).getDay(),\n            },\n            (_, i) => i\n          ),\n          (day) => day,\n          () => {\n            return html`<li class=\"day\"></li>`\n          }\n        )}\n      </ol>\n\n      <slot></slot>\n    `\n  }\n\n  private _onClick() {\n    this.count++\n    this.dispatchEvent(new CustomEvent('count-changed'))\n  }\n\n  /**\n   * Formats a greeting\n   * @param name The name to say \"Hello\" to\n   */\n  sayHello(name: string): string {\n    return `Hello, ${name}`\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'date-picker': datePicker\n  }\n}\n"]}