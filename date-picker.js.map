{"version":3,"file":"date-picker.js","sourceRoot":"","sources":["src/date-picker.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css, PropertyValues } from 'lit'\nimport { customElement, property, state } from 'lit/decorators.js'\nimport { repeat } from 'lit/directives/repeat.js'\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('date-picker')\nexport class DatePicker extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n      border: solid 1px gray;\n      padding: 16px;\n      max-width: 25em;\n      font-size: 0.7rem;\n      font-family: Helvetica, sans-serif;\n      box-sizing: border-box;\n    }\n    .grid {\n      display: grid;\n      grid-template-columns: repeat(7, 1fr);\n      gap: 0em;\n      list-style: none;\n      padding: 0;\n      margin: 0;\n    }\n    .weekdays > li {\n        display: grid;\n        place-items: center;\n        margin-block-end: 0.5em;\n        font-weight: bold;\n        color: #999;\n        &:empty {\n          border: 1px solid #ddd;\n          background-color: #efefef;\n        }\n      }\n    .calendar > li {\n        aspect-ratio: 1;\n        outline: solid 1px #ccc;\n        background-color: #fff;\n        display: grid;\n        place-items: center;\n        font-size: 1.2em;\n        cursor: pointer;\n        &:empty {\n          outline: 1px solid #ddd;\n          background-color: #efefef;\n        }\n        &.prevmonth, &.nextmonth {\n          color: #999;\n        }\n        &:hover {\n          background-color: #def;\n        }\n      }\n      .calendar-head {\n        display: grid;\n        grid-template-columns: min-content auto min-content;\n        gap: 0em;\n        padding: 0;\n        margin: 0;\n        font-size: 1.2em;\n        & h4 {\n          text-align: center;\n          margin: 0;\n          padding: 0;\n        }\n        & button {\n          border: none;\n          background-color: transparent;\n          cursor: pointer;\n          color: #333;\n          &:hover {\n            color: #000;\n          }\n        }\n      }\n    }\n  `\n\n  @state()\n  numberOfDays = 0\n\n  @state()\n  numberOfDaysLastMonth = 0\n\n  @property({ type: Object })\n  date = new Date()\n\n  /**\n   * The number of times the button has been clicked.\n   */\n  @property({ type: Number })\n  count = 0\n\n  override willUpdate(changedProperties: PropertyValues<this>) {\n    // only need to check changed properties for an expensive computation.\n    if (changedProperties.has('date')) {\n      // calculate month with days for the app.\n      console.log('changedProperties', changedProperties)\n      this.numberOfDays = new Date(\n        this.date.getFullYear(),\n        this.date.getMonth() + 1,\n        0\n      ).getDate()\n      this.numberOfDaysLastMonth = new Date(\n        this.date.getFullYear(),\n        this.date.getMonth(),\n        0\n      ).getDate()\n    }\n  }\n\n  override render() {\n    return html`\n      <div class=\"calendar-head\">\n        <div class=\"calendar-head__back\">\n          <button @click=\"${this.handleChangeMonth('prev')}\">&lt;</button>\n        </div>\n        <h4>\n          ${this.date.toLocaleString('en-us', { month: 'long' })}\n          ${this.date.getFullYear()}\n        </h4>\n        <div class=\"calendar-head__fwd\">\n          <button @click=\"${this.handleChangeMonth('next')}\">&gt;</button>\n        </div>\n      </div>\n      <p\n        >Days in\n        ${this.date.toLocaleString('default', {\n          month: 'long',\n        })}:\n        ${this.numberOfDays}<br />\n        Previous month had: ${this.numberOfDaysLastMonth} <br />First of the\n        month occurs on a:\n        ${new Date(\n          this.date.getFullYear(),\n          this.date.getMonth(),\n          1\n        ).toLocaleString('default', {\n          weekday: 'long',\n        })}\n        = ${new Date(this.date.getFullYear(), this.date.getMonth(), 1).getDay()}\n      </p>\n\n      <!-- weekdays -->\n      <ul class=\"weekdays grid\">\n        ${repeat(\n          Array.from({ length: 7 }, (_, i) => i),\n          (day) => day,\n          (day) => {\n            return html`<li\n              >${new Intl.DateTimeFormat('en-US', {\n                weekday: 'short',\n              }).format(new Date(2018, 0, day))}\n            </li>`\n          }\n        )}\n      </ul>\n\n      <!-- start of calendar -->\n      <ol class=\"calendar grid\">\n        ${repeat(\n          Array.from(\n            {\n              length: this.getStartDay().getDay(),\n            },\n            (_, i) => {\n              return (\n                this.numberOfDaysLastMonth - this.getStartDay().getDay() + 1 + i\n              )\n            }\n          ),\n          (day) => day,\n          (day) => {\n            return html`<li class=\"day prevmonth\">${day}</li>`\n          }\n        )}\n        <!-- current days -->\n        ${repeat(\n          Array.from({ length: this.numberOfDays }, (_, i) => i + 1),\n          (day) => day,\n          (day) => {\n            return html`<li class=\"day\">${day}</li>`\n          }\n        )}\n        ${repeat(\n          Array.from(\n            {\n              length:\n                7 -\n                new Date(\n                  this.date.getFullYear(),\n                  this.date.getMonth(),\n                  this.numberOfDays + 1\n                ).getDay(),\n            },\n            (_, i) => i\n          ),\n          (day) => day,\n          (day) => {\n            return html`<li class=\"day nextmonth\">${day + 1}</li>`\n          }\n        )}\n      </ol>\n\n      <slot></slot>\n    `\n  }\n\n  private handleChangeMonth(direction: 'prev' | 'next') {\n    return () => {\n      const dir = direction === 'prev' ? -1 : 1\n      this.date = new Date(\n        this.date.getFullYear(),\n        this.date.getMonth() + dir,\n        1\n      )\n    }\n  }\n\n  private getStartDay(date?: Date) {\n    const aDate = date ?? this.date\n    return new Date(aDate.getFullYear(), aDate.getMonth(), 1)\n    /* .toLocaleString('default', {\n      weekday: 'long',\n    }) */\n  }\n\n  // private _onClick() {\n  //   this.count++\n  //   this.dispatchEvent(new CustomEvent('count-changed'))\n  // }\n\n  /**\n   * Formats a greeting\n   * @param name The name to say \"Hello\" to\n   */\n  sayHello(name: string): string {\n    return `Hello, ${name}`\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'date-picker': DatePicker\n  }\n}\n"]}